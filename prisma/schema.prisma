generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Review {
  id        String      @id @default(cuid())
  title     String
  text      String
  images    String[]
  grade     String
  tags      PieceTag[]
  piece     Piece       @relation(fields:[pieceId], references:[id])
  pieceId   String
  author    User        @relation(fields:[authorId], references:[id])
  authorId  String
  comments  ReviewComment[]
  likes     ReviewLike[]
}

model Piece {
  id            String        @id @default(cuid())
  titleEn       String
  titleRu       String?
  descriptionEn String
  descriptionRu String?
  group         PieceGroup    @relation(fields:[groupId], references:[id])
  groupId       String
  author        User          @relation(fields:[authorId], references:[id])
  authorId      String
  ratings       PieceRating[]
  reviews       Review[]
}

model PieceGroup {
  id      String    @id @default(cuid())
  handle  String    @unique
  nameEn  String
  nameRu  String?
  pieces  Piece[]
}

model ReviewComment {
  id        String  @id @default(cuid())
  text      String
  review    Review  @relation(fields:[reviewId], references:[id])
  reviewId  String
  author    User    @relation(fields:[authorId], references:[id])
  authorId  String
}

model ReviewLike {
  id        String  @id @default(cuid())
  review    Review  @relation(fields:[reviewId], references:[id])
  reviewId  String
  author    User    @relation(fields:[authorId], references:[id])
  authorId  String
  liked     Boolean
}

model PieceRating {
  id        String  @id @default(cuid())
  piece     Piece   @relation(fields:[pieceId], references:[id])
  pieceId   String
  author    User    @relation(fields:[authorId], references:[id])
  authorId  String
  stars     String
}

model PieceTag {
  id        String  @id @default(cuid())
  name      String
  reviews   Review[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields:[userId], references:[id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique@map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields:[userId], references:[id], onDelete: Cascade)
}

model User {
  id                String    @id @default(cuid())
  name              String?
  username          String?
  displayName       String?
  email             String?   @unique
  emailVerified     DateTime?
  image             String?
  avatar            String?
  bio               String?
  registrationDate  DateTime  @default(now())
  isAdmin           Boolean   @default(false)
  reviews           Review[]
  reviewComments    ReviewComment[]
  reviewLikes       ReviewLike[]
  pieceRatings      PieceRating[]
  piecesAdded       Piece[]
  accounts          Account[]
  sessions          Session[]
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}